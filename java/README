EASC (Enterprise Application Server Connectivity): Java part
========================================================================
$Id$

Getting started
---------------
Type "ant":)

Requirements
------------
- JDK 1.5
- Apache Ant

Modules
-------
* Serializer
  Implementation: net.xp_framework.easc.protocol.standard.Serializer
  Unit tests:     net.xp_framework.easc.unittest.SerializerTest

* Methodmatcher
  Implementation: net.xp_framework.easc.util.MethodMatcher
  Unit tests:     net.xp_framework.easc.unittest.MethodMatcherTest

* Protocol string encoding
  Implementation: net.xp_framework.easc.util.ByteCountedString
  Unit tests:     net.xp_framework.easc.unittest.ByteCountedStringTest  

* MBean
  Implementation: net.xp_framework.easc.jmx.jboss.EascServiceMBean

* Multithreaded TCP/IP Server
  Implementation: net.xp_framework.easc.server.ServerThread
  Unit tests:     net.xp_framework.easc.unittest.ServerTest

Deploying the EASC Service
--------------------------
Use "ant jboss-sar" to create a JBoss Service Application Archive 
and deploy the generated .sar-file to your JBoss-deploy directory.

You should see the following in the logfile:
  Creating net.xp_framework.easc:service=EascService
  Created net.xp_framework.easc:service=EascService
  Starting net.xp_framework.easc:service=EascService
  Started net.xp_framework.easc:service=EascService

Security
--------
EASC makes use of Java's JSSE security system.
Please see README.SSL for more information on SSL.

Testing
-------
To verify the bean has been deployed, you can use the JMX console
(usually at http://jboss.example.com:8080/jmx-console/). Type 

  *:service=EascService,*
  
into the ObjectName Filter input box and you should see the following:

  net.xp_framework.easc

    * service=EascService

You can click on the service=EascService to view the service details.

Note
----
Other application servers are not supported at the moment. Feel free 
to implement an MBean for them:)

<EOF>
